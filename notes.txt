 <!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
  <title>StudyFlow Chatbot</title>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600&display=swap" rel="stylesheet">
  <style>
    :root {
      --primary: #2bad98;
      --accent: #2bad98;
      --chat-bg: #ffffff;
      --bot-bubble: #f0f0f0;
      --user-bubble: #2bad98;
      --text-dark: #000000;
      --text-light: #ffffff;
      --shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: 'Poppins', -apple-system, BlinkMacSystemFont, sans-serif;
      -webkit-tap-highlight-color: transparent;
    }

    body {
      background: #f5f5f5;
      min-height: 100vh;
      display: flex;
      justify-content: center;
      align-items: center;
      padding: 0;
      touch-action: manipulation;
    }

    .chat-container {
      width: 100%;
      max-width: 100%;
      height: 100vh;
      background: var(--chat-bg);
      display: flex;
      flex-direction: column;
      overflow: hidden;
      border-radius: 0;
    }

    @media (min-width: 500px) {
      .chat-container {
        max-width: 500px;
        height: 90vh;
        border-radius: 10px;
        box-shadow: var(--shadow);
        border: 1px solid #e0e0e0;
      }
      body {
        padding: 10px;
      }
    }

    .chat-header {
      background: var(--primary);
      color: var(--text-light);
      text-align: center;
      font-size: 1.1rem;
      padding: 1rem;
      font-weight: 600;
      position: sticky;
      top: 0;
      z-index: 10;
    }

    .chat-messages {
      flex: 1;
      overflow-y: auto;
      padding: 15px;
      display: flex;
      flex-direction: column;
      gap: 10px;
      -webkit-overflow-scrolling: touch;
    }

    .message {
      max-width: 85%;
      padding: 10px 14px;
      border-radius: 16px;
      animation: fadeIn 0.3s ease;
      font-size: 0.9rem;
      line-height: 1.4;
      box-shadow: var(--shadow);
      word-wrap: break-word;
    }

    .bot-message {
      background: var(--bot-bubble);
      color: var(--text-dark);
      align-self: flex-start;
      border-bottom-left-radius: 4px;
    }

    .user-message {
      background: var(--user-bubble);
      color: var(--text-light);
      align-self: flex-end;
      border-bottom-right-radius: 4px;
    }

    .typing {
      width: 55px;
      height: 28px;
      background: var(--bot-bubble);
      border-radius: 16px;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 4px;
      padding: 5px 10px;
      box-shadow: var(--shadow);
    }

    .typing span {
      width: 7px;
      height: 7px;
      background: var(--primary);
      border-radius: 50%;
      animation: bounce 0.6s infinite ease-in-out alternate;
    }

    .typing span:nth-child(2) { animation-delay: 0.2s; }
    .typing span:nth-child(3) { animation-delay: 0.4s; }

    @keyframes bounce {
      0% { transform: translateY(0); }
      100% { transform: translateY(-4px); }
    }

    .options {
      display: flex;
      flex-wrap: wrap;
      gap: 6px;
      margin-top: 6px;
    }

    .option-btn {
      background: white;
      color: var(--text-dark);
      border: 1px solid #e0e0e0;
      border-radius: 16px;
      padding: 8px 12px;
      font-size: 0.85rem;
      cursor: pointer;
      font-weight: 500;
      transition: all 0.2s ease;
      box-shadow: var(--shadow);
    }

    .option-btn:active {
      background: #f0f0f0;
      transform: scale(0.98);
    }

    .input-container {
      display: flex;
      padding: 10px;
      background: white;
      border-top: 1px solid #e0e0e0;
      position: sticky;
      bottom: 0;
    }

    .chat-input {
      flex: 1;
      padding: 10px 14px;
      border-radius: 20px;
      border: 1px solid #e0e0e0;
      font-size: 0.9rem;
      outline: none;
      transition: all 0.2s ease;
      
    }

    .chat-input:focus {
      border-color: var(--primary);
    }

    .send-btn {
      background: var(--primary);
      color: white;
      border: none;
      width: 38px;
      height: 38px;
      border-radius: 50%;
      margin-left: 8px;
      cursor: pointer;
      transition: all 0.2s ease;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .send-btn:active {
      background: var(--accent);
      transform: scale(0.95);
    }

    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(8px); }
      to { opacity: 1; transform: translateY(0); }
    }

    .resource-link {
      display: inline-block;
      margin-top: 6px;
      color: var(--primary);
      text-decoration: none;
      font-weight: 500;
      transition: all 0.2s ease;
      border-bottom: 1px solid transparent;
    }

    .resource-link:hover {
      border-bottom: 1px solid var(--primary);
    }

    /* Mobile-specific optimizations */
    @media (max-width: 500px) {
      .message {
        max-width: 90%;
        padding: 8px 12px;
        font-size: 0.85rem;
      }
      
      .option-btn {
        padding: 6px 10px;
        font-size: 0.8rem;
      }
      
      .chat-input {
        padding: 8px 12px;
      }
    }
  </style>
</head>
<body>
  <div class="chat-container">
    <div class="chat-header">StudyFlow Chatbot</div>
    <div class="chat-messages" id="chat-messages"></div>
    <div class="input-container">
      <input type="text" class="chat-input" id="user-input" placeholder="Type your message..." autocapitalize="sentences" autocomplete="off">
      <button class="send-btn" id="send-btn">
        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <line x1="22" y1="2" x2="11" y2="13"></line>
          <polygon points="22 2 15 22 11 13 2 9 22 2"></polygon>
        </svg>
      </button>
    </div>
  </div>
<script>
  const messages = document.getElementById("chat-messages");
  const userInput = document.getElementById('user-input');
  const sendBtn = document.getElementById('send-btn');

  const state = {
    board: null,
    cls: null,
    subject: null,
    chapter: null,
    chapterType: null,
    medium: null
  };

  sendBtn.addEventListener('click', sendMessage);
  userInput.addEventListener('keypress', e => {
    if (e.key === 'Enter') sendMessage();
  });

  function appendMessage(content, sender = 'bot', isHTML = false) {
    const msg = document.createElement("div");
    msg.className = `message ${sender}-message`;
    msg.innerHTML = isHTML ? content : content.replace(/\n/g, '<br>');
    messages.appendChild(msg);
    scrollToBottom();
  }

  function scrollToBottom() {
    messages.scrollTop = messages.scrollHeight;
    setTimeout(() => {
      messages.scrollTop = messages.scrollHeight;
    }, 100);
  }

  function showTyping(callback) {
    const typing = document.createElement("div");
    typing.className = "message bot-message typing";
    typing.innerHTML = `<span class="dot"></span><span class="dot"></span><span class="dot"></span>`;
    messages.appendChild(typing);
    scrollToBottom();
    setTimeout(() => {
      typing.remove();
      callback();
    }, 1000);
  }

  function showOptions(options, onClick) {
    const container = document.createElement('div');
    container.className = 'options';
    options.forEach(opt => {
      const btn = document.createElement('button');
      btn.className = 'option-btn';
      btn.textContent = opt;
      btn.onclick = () => {
        appendMessage(opt, 'user');
        container.remove();
        showTyping(() => onClick(opt));
      };
      container.appendChild(btn);
    });
    messages.appendChild(container);
    scrollToBottom();
  }

  function sendMessage() {
    const message = userInput.value.trim();
    if (message) {
      appendMessage(message, 'user');
      userInput.value = '';
      showTyping(() => {
        appendMessage("I'm a study assistant. Please use the buttons to navigate.");
      });
    }
    userInput.focus();
  }

  function startBot() {
    showTyping(() => {
      appendMessage("Hello! I'm StudyFlow, your learning assistant. 🌟");
      showTyping(() => {
        appendMessage("Let's get started! Select your board:");
        showOptions(["Punjab", "Federal"], handleBoard);
      });
    });
  }

  function handleBoard(input) {
    state.board = input;
    appendMessage("Great choice! Now select your class:");
    showOptions(["9", "10"], handleClass);
  }

  function handleClass(input) {
    state.cls = input;
    appendMessage("Awesome! Choose your subject:");
    const subjects = input === "9"
      ? ["English", "Math", "Physics", "Chemistry", "Biology", "Urdu", "Pak Study"]
      : ["English", "Math", "Physics", "Chemistry", "Biology", "Urdu", "Pak Study"];
    showOptions(subjects, handleSubject);
  }

  function handleSubject(input) {
    state.subject = input;
    if (input === 'Urdu') {
      appendMessage("Choose type:");
      showOptions(["Chapter", "Nazam", "Ghazal"], type => {
        state.chapterType = type;

        let chapters = [];
        if (type === 'Chapter') {
          chapters = Array.from({ length: 12 }, (_, i) => `${i + 1}`);
        } else if (type === 'Nazam') {
          chapters = ['1', '2', '15', '16', '17', '18', '19', '20'];
        } else if (type === 'Ghazal') {
          chapters = ['21', '22', '23', '24'];
        }

        appendMessage(`Choose ${type}:`);
        showOptions(chapters, handleChapter);
      });
    } else if (input === 'Biology') {
      const startChapter = state.cls === '9' ? 1 : 10;
      const endChapter = state.cls === '9' ? 9 : 18;
      const chapters = Array.from({ length: endChapter - startChapter + 1 }, (_, i) => `${i + startChapter}`);
      appendMessage("Select chapter:");
      showOptions(chapters, handleChapter);
    } else if (input === 'Pak Study') {
      appendMessage("Select language medium:");
      showOptions(["English", "Urdu"], medium => {
        state.medium = medium;
        const startChapter = state.cls === '9' ? 1 : 5;
        const endChapter = state.cls === '9' ? 4 : 8;
        const chapters = Array.from({ length: endChapter - startChapter + 1 }, (_, i) => `${i + startChapter}`);
        appendMessage("Select chapter:");
        showOptions(chapters, handleChapter);
      });
    } else {
      let chapters;
      if (state.cls === '10' && input === 'Physics') {
        chapters = Array.from({ length: 9 }, (_, i) => `${i + 10}`);
      } else if (state.cls === '10' && input === 'Chemistry') {
        chapters = Array.from({ length: 8 }, (_, i) => `${i + 9}`);
      } else {
        let total = 12;
        if (state.cls === '9') {
          total = input === 'Math' ? 17 : 12;
        } else {
          if (input === 'Math') total = 13;
          if (input === 'English') total = 13;
        }
        chapters = Array.from({ length: total }, (_, i) => `${i + 1}`);
      }
      appendMessage("Select chapter:");
      showOptions(chapters, handleChapter);
    }
  }

  function handleChapter(input) {
    state.chapter = input;
    const subject = state.subject;

    if (subject === 'Biology') {
      showOptions(["📚 Notes", "📝 Past Paper"], handleOption);
    } else if (subject === 'Pak Study') {
      showOptions(["📚 Notes", "📝 Past Paper"], handleOption);
    } else if (subject === 'Urdu' && state.chapterType === 'Chapter') {
      showOptions(["📚 Notes", "❓ MCQs", "📝 Past Paper"], handleOption);
    } else {
      const optionsMap = {
        English: ["🌍 Translation", "❓ Q/A", "📖 Summary", "🔠 MCQs", "📝 Past Paper"],
        Math: ["✏️ Exercise", "📝 Past Paper"],
        Physics: ["⚛️ Exercise", "📝 Past Paper"],
        Chemistry: ["🧪 Exercise", "📝 Past Paper"],
        Urdu: ["📚 Notes", "📝 Past Paper"]
      };
      appendMessage("Select option:");
      showOptions(optionsMap[subject], handleOption);
    }
  }

  function handleOption(input) {
    const s = state.subject;
    const c = parseInt(state.chapter);
    const pad = c < 10 ? `0${c}` : `${c}`;
    const t = state.chapterType;
    const b = state.board;
    const cls = state.cls;
    const medium = state.medium;

    const pastPaperLink = b === 'Federal'
      ? 'https://www.fbise.edu.pk/Old%20Question%20Paper.php'
      : 'https://www.urdupoint.com/education/past-papers/board.html';

    if (input.includes("Past Paper")) {
      return appendMessage(
        `<a href="${pastPaperLink}" target="_blank" class="resource-link">📄 View ${b} Board ${s} Past Papers</a>`,
        'bot',
        true
      );
    }

    if (s === 'Biology') {
      if (input.includes("Notes")) {
        const bioLink = cls === '10'
          ? 'https://www.freeilm.com/10th-class-biology-notes-short-long-mcqs/'
          : 'https://www.freeilm.com/class-9-biology-notes-short-long-mcqs/';
        
        const bioMessage = cls === '10'
          ? `📚 Here are complete Biology notes for Class 10: <br><br>
             <a href="${bioLink}" target="_blank" class="resource-link">✨ View All Biology Notes (Short, Long, MCQs)</a>`
          : `📚 Here are complete Biology notes for Class 9: <br><br>
             <a href="${bioLink}" target="_blank" class="resource-link">✨ View All Biology Notes (Short, Long, MCQs)</a>`;
        
        return appendMessage(bioMessage, 'bot', true);
      }
    }

    if (s === 'Pak Study') {
      if (input.includes("Notes")) {
        let pakStudyLink = '';
        if (cls === '9') {
          pakStudyLink = medium === 'English' 
            ? `https://www.freeilm.com/9th-class-pak-studies-chapter-${c}-eng-medium-new/`
            : `https://www.freeilm.com/class-9-pak-studies-chapter-${c}-urdu-medium-new/`;
        } else {
          pakStudyLink = medium === 'English'
            ? `https://www.freeilm.com/10th-class-pak-studies-chapter-${c}-eng-medium-new/`
            : `https://www.freeilm.com/class-10-pak-studies-chapter-${c}-urdu-medium-new/`;
        }
        
        const pakStudyMessage = `📚 Here are Pakistan Studies notes for Class ${cls}, Chapter ${c} (${medium} medium): <br><br>
           <a href="${pakStudyLink}" target="_blank" class="resource-link">✨ View Chapter ${c} Notes</a>`;
        
        return appendMessage(pakStudyMessage, 'bot', true);
      }
    }

    if (s === 'English') {
      if (input.includes("Translation")) {
        return appendMessage(
          `<a href="https://www.freeilm.com/${cls === '10' ? '10th' : '9th'}-class-english-unit-${c}-translation/" target="_blank" class="resource-link">🌍 View Translation</a>`,
          'bot',
          true
        );
      }
      if (input.includes("Q/A")) {
        return appendMessage(
          `<a href="https://www.freeilm.com/${cls === '10' ? '10th' : '9th'}-class-english-${cls === '10' ? 'questions-answers-notes' : 'chapters-questions-answers'}/" target="_blank" class="resource-link">❓ View Q/A</a>`,
          'bot',
          true
        );
      }
      if (input.includes("Summary")) {
        return appendMessage(
          `<a href="https://www.freeilm.com/${cls === '10' ? '10th' : '9th'}-class-english-summary${cls === '10' ? '-notes' : ''}/" target="_blank" class="resource-link">📖 View Summary</a>`,
          'bot',
          true
        );
      }
      if (input.includes("MCQs")) {
        return appendMessage("🔠 MCQs not available yet.", 'bot');
      }
    }

    if (s === 'Math' && input.includes("Exercise")) {
      return appendMessage(
        `<a href="https://www.freeilm.com/chapter-${c}-${cls}th-class-math-solution-pdf/" target="_blank" class="resource-link">✏️ View Math Exercise</a>`,
        'bot',
        true
      );
    }

    if (s === 'Physics' && input.includes("Exercise")) {
      return appendMessage(
        `<a href="https://www.freeilm.com/${cls}th-physics-ch-${pad}-numericals-short-long-mcqs/" target="_blank" class="resource-link">⚛️ View Physics Exercise</a>`,
        'bot',
        true
      );
    }

    if (s === 'Chemistry' && input.includes("Exercise")) {
      return appendMessage(
        `<a href="https://www.freeilm.com/10th-chemistry-ch-${c}-short-long-mcqs-numericals/" target="_blank" class="resource-link">🧪 View Chemistry Exercise</a>`,
        'bot',
        true
      );
    }

    if (s === 'Urdu') {
      if (t === 'Chapter') {
        if (input.includes("Notes")) {
          return appendMessage(
            `<a href="https://www.freeilm.com/chapter-${c}-10th-class-urdu-notes/" target="_blank" class="resource-link">📚 View Urdu Notes</a>`,
            'bot',
            true
          );
        }
        if (input.includes("MCQs")) {
          return appendMessage(
            `<a href="https://www.freeilm.com/chapter-${c}-10th-class-urdu-mcqs/" target="_blank" class="resource-link">❓ View Urdu MCQs</a>`,
            'bot',
            true
          );
        }
      } else if (t === 'Nazam') {
        return appendMessage(
          `<a href="https://www.freeilm.com/nazam-${c}-10th-class-urdu-notes/" target="_blank" class="resource-link">📜 View Nazam Notes</a>`,
          'bot',
          true
        );
      } else if (t === 'Ghazal') {
        return appendMessage(
          `<a href="https://www.freeilm.com/ghazal-${c}-10th-class-urdu-notes/" target="_blank" class="resource-link">✍️ View Ghazal Notes</a>`,
          'bot',
          true
        );
      }
    }
  }

  startBot();
</script>
</body>
</html>